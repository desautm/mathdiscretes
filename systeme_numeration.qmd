# Systèmes de numération positionnelle

Un système de numération est un ensemble de règles qui permettent de représenter des nombres. Le plus ancien est probablement le système unaire où le symbole | représente l’entier un, || représente l’entier deux, ||| pour trois, |||| pour quatre et ainsi de suite. Ce système atteint vite ses limites, mais il permet de mettre en évidence le fait qu’il existe plusieurs façons de représenter les entiers.

| **Nom français** |     **Système unaire**     | **Système décimal** | **Chiffres romains** |
|:----------------:|:--------------------------:|:-------------------:|:--------------------:|
|       Zéro       |                            |          0          |                      |
|        Un        |             \|             |          1          |           I          |
|       Deux       |            \|\|            |          2          |          II          |
|       Trois      |           \|\|\|           |          3          |          III         |
|     $\vdots$     |          $\vdots$          |       $\vdots$      |       $\vdots$       |
|       Douze      | \|\|\|\| \|\|\|\| \|\|\|\| |          12         |          XII         |
|     $\vdots$     |          $\vdots$          |       $\vdots$      |       $\vdots$       |

Dans la table ci-dessus, on remarque que sur une ligne donnée, on retrouve quatre manières différentes de représenter le même entier. Pour le reste de cette section, il sera important de dissocier la **représentation** d’un nombre et sa **valeur**.

:::{#def-systeme-numeration}
## Système de numération

Un **système de numération** permet de compter des objets et de les représenter par des nombres. Un système de numération **positionnel** possède trois éléments:

- Base $b$ (un entier supérieur à 1)
- Symboles (digits): 0, 1, 2, ..., $b$-1
- Poids des symboles selon la position et la base, où poids=base^position^

:::

:::{.callout-note}
Lorsque plusieurs bases interviennent dans un même contexte, on écrit $(a_n \ldots a_1a_0)_b$ pour indiquer que le nombre représenté en base $b$.
:::

:::{#def-representation-polynomiale}
## Représentation polynomiale

Le système positionnel utilise la **représentation polynomiale**. Celle-ci est donnée par:
$$
(a_na_{n-1}\ldots a_1a_0,a_{-1}a_{-2}\ldots a_{-m})_b = a_nb^n+a_{n-1}b^{n-1}+\ldots +a_1b^1+a_0b^0+a_{-1}b^{-1}+\ldots +a_{-m}b^{-m}
$$
où $b$ est la **base** et les $a_i$ sont des **coefficients** (les symboles de votre système de numération).
:::

## Système décimal

Il s’agit du système de numération le plus utilisé dans notre société. On peut le résumer avec les trois règles suivantes.

- Base = 10
- Symboles ordonnés qu'on nomme les *chiffres* : 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.
- Le poids des symboles est donné par 10^position^

:::{#exm-decimal-3482}
Représentez le nombre 3482 sous une forme de numération positionnelle.

| **Symboles (digits)**                 |       3       |       4       |       8       |       2       |
|---------------------------------------|:-------------:|:-------------:|:-------------:|:-------------:|
| **Rang (position)**                   | $\phantom{V}$ | $\phantom{V}$ | $\phantom{V}$ | $\phantom{V}$ |
| **Poids**                             |               |               |               |               |
| **Valeur du poids**                   |               |               |               |               |
| **Valeur de chaque symbole (digits)** |               |               |               |               |

Nous avons donc que 3482=

:::

:::{.callout-important}
Pour convertir un nombre de la base $b$ vers la base 10 (décimal), on trouve sa représentation polynomiale.
:::

En `Python`, on peut utiliser la commande `int` pour convertir un **entier** dans une base quelconque vers la base 10. On utilise cette fonction de la manière suivante: `int(x = 0, base = 10)`, où `x` est l'entier à convertir et `base` est la base de départ du nombre.

:::{#exm-octal-vers-decimal}
En utilisant la représentation polynomale en base 10, convertissez le nombre (176,21)~8~.
:::

En `Python`, nous aurions:
```{python}
#| label: conversion-octal-decimal

int('176', 8)
```

## Système binaire

Ce concept est essentiel en informatique, puisque les processeurs des ordinateurs sont composés de transistors ne gérant que deux états chacun (0 ou 1). Un calcul informatique n'est donc qu'une suite d'opérations sur des paquets de 0 et de 1, appelés **bits**.

- Base = 2
- Symboles ordonnés qu'on nomme les *bits*: 0, 1
- Le poids des symboles est donné par 2^position^

:::{.callout-important}
En base 2, le *chiffre* 2 n'existe pas (c'est un **nombre**); tout comme le *chiffre* 10 n'existe pas en base 10 (c'est un **nombre**).
:::

:::{#exm-11001-en-decimal}
Convertissez le nombre (11001)~2~ en décimal.

| **Symboles (digits)**                 |       1       |       1       |       0       |       0       |       1       |
|---------------------------------------|:-------------:|:-------------:|:-------------:|:-------------:|:-------------:|
| **Rang (position)**                   | $\phantom{V}$ | $\phantom{V}$ | $\phantom{V}$ | $\phantom{V}$ | $\phantom{V}$ |
| **Poids**                             |               |               |               |               |               |
| **Valeur du poids**                   |               |               |               |               |               |
| **Valeur de chaque symbole (digits)** |               |               |               |               |               |

Nous avons donc que (11001)~2~ = 
:::

En `Python`, nous aurions:
```{python}
#| label: conversion-binaire-decimal

int('11001', 2)
```

:::{#exm-binaire-to-decimal}
Convertissez les nombres suivants en base 10 (décimal).

(a) (110)~2~ = 
(a) (101101)~2~ = 
(a) (0,1011)~2~ = 
(a) (110,101)~2~ = 

:::

:::{#exm-nombres-succedent-0-base-2-1}
Quels sont les nombres qui, dans la base deux, succèdent à (0)~2~?
:::

:::{#exm-nombres-succedent-0-base-2-2}
Quels sont les nombres qui, dans la base deux, succèdent à (1110)~2~?
:::

```{python}
depart = 0b1110
for i in range(6):
    depart = depart + 1
    print(bin(depart))
```

## Système hexadécimal

Le système hexadécimal est utilisé notamment en électronique numérique et en informatique car il est particulièrement commode et permet un compromis entre le code binaire des machines et une base de numération pratique à utiliser pour les ingénieurs. En effet, chaque chiffre hexadécimal correspond exactement à quatre chiffres binaires (ou bits), rendant les conversions très simples et fournissant une écriture plus compacte. L'hexadécimal a été utilisé la première fois en 1956 par les ingénieurs de l'ordinateur Bendix G-15.

- Base = 16
- Symboles ordonnés qu'on nomme les *chiffres*: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F
- Le poids des symboles est donné par 16^position^

On remarque qu'en base 16, les dix chiffres de 0 à 9 ne suffisent pas. Il faut donc se doter de 6 symboles additionnels. On utilise les lettres de A à F avec la signification suivante:

$$
(A)_{16}=(10)_{10}, \quad (B)_{16}=(11)_{10}, \quad (C)_{16}=(12)_{10}, \quad (D)_{16}=(13)_{10}, \quad (E)_{16}=(14)_{10}, \quad (F)_{16}=(15)_{10}
$$

:::{#exm-conversion-hexa-decimal}   
Trouvez la représentation en base 10 de:

a) (AB0)~16~
a) (214,EA)~16~
:::

:::{#exm-nombres-succedent-hexa}
Donnez, en base 16, les dix nombres qui succèdent à (AAA)~16~.
:::

## Division entière

:::{#def-divisibilite}
## Divisibilité

Si $a\in\mathbb{Z}$, $b\in\mathbb{Z}$ et $a\neq 0$, on dit que $a$ **divise** $b$ s'il existe un entier $c$ tel que $b=ac$. L'entier $a$ est alors appelé **facteur** de $b$.

Si $a$ **divise** $b$, nous le notons $a \mid b$.
:::

:::{#thm-divisibilite}
## Divisibilité

Soit $a$, $b$ et $c$ des nombres entiers quelconques, avec $a\neq 0$.

1. Si $a\mid b$ et $a\mid c$ alors $a\mid(b+c)$ et $a\mid (b-c)$.
1. Si $a\mid b$ alors $a\mid (bc)$.
1. Si $a\mid b$ et $b\mid c$ alors $a\mid c$.
:::

:::{#exm-vrai-faux-divisibilite}
Vrai ou faux? Justifiez en invoquant une définition, un théorème, en donnant une preuve ou un contre-exemple.

a) $7\mid 10$
a) $-5\mid 10$
a) $100\mid 10$
a) $5\mid -10$
:::

:::{#thm-une-seule-paire-entiers}
Soit $a$ et $d$ des entiers, avec $d>0$. Il existe une seule paire d'entiers $q$ et $r$ satisfaisant
$$
0\leq r<d \quad \text{et} \quad a=dq+r
$$
:::

:::{#def-diviseur-dividende-quotient-reste}
## Diviseur, dividende, quotient, reste

Considérons $a$ et $d$ des entiers, avec $d>0$. Le @thm-une-seule-paire-entiers stipule qu'il existe une seule paire d'entiers $q$ et $r$ satisfaisant
$$
a=dq+r \quad \text{et} \quad 0\leq r<d
$$

Par exemple, si $a=17$ et $d=3$, on a 
$$
17=3\cdot 5+2 \quad \text{et} \quad 0\leq 2<3
$$

- L'entier $d=3$ est appelé **diviseur**.
- L'entier $a=17$ est appelé le **dividende**.
- L'entier $q=5$ est appeléle **quotient** (notation: $q=a\mathbf{div} d$).
- L'entier $r=2$ est appelé le **reste**.
:::

## Conversions de la base 10 vers une base $b$

Pour convertir un nombre entier de la base 10 vers une base $b$, il faut effectuer de façon successive des divisions en utilisant la @def-diviseur-dividende-quotient-reste. Les restes des divisions successives correspondent aux coefficients de la représentation polynomiale (**lire de bas en haut**).

### Conversions vers binaire

:::{#exm-conversion-vers-binaire}
Convertissez les nombres suivants en binaire.

a) 115
a) 71
:::

Nous pouvons utiliser la command `bin` de `Python` pour convertir des **entiers** décimaux en binaire.

```{python}
#| label: conversion-binaire

print(bin(115))
print(bin(71))
```

Pour convertir un nombre fractionnaire en binaire, il suffit de multiplier (plutôt que de diviser) la partie fractionnaire en notant les parties entières et fractionnaires obtenues. Il faut ensuite répéter ces étapes avec la nouvelle partie fractionnaire et poursuivre le processus jusqu'à ce que la partie fractionnaire soit nulle. Les parties entières des résultats de ces produits correspondent aux coefficients de la représentation polynomiale (**lire de haut en bas**).

:::{#exm-conversion-fractionnaire-binaire}
Convertissez les nombres suivants en binaire.

a) (0,8125)~10~
a) (0,15)~10~
:::

:::{.callout-important}
La conversion en binaire ou en n'importe quelle base ne donne pas toujours une suite finie. Si c'est un nombre rationnel, la conversion donnera toujours une suite finie ou périodique.
:::

:::{#exm-conversion-binaire-totale}
Convertissez en binaire les nombres suivants, en ne conservant que 6 chiffres pour la partie fractionnaire, au besoin.

a) (51,375)~10~
a) (564,32)~10~
:::

### Conversions vers hexadécimal

:::{#exm-conversion-decimal-hexadecimal}
Convertissez les nombres décimaux suivants en hexadécimal.

a) (176,47)~10~
a) (69,28)~10~
:::

Nous pouvons utiliser la command `hex` de `Python` pour convertir des **entiers** décimaux en hexadécimal.

```{python}
#| label: conversion-hexadecimal

print(hex(115))
print(hex(71))
```

### Conversions binaire - hexadécimal

Une des raisons pour lesquelles le format hexadécimal a été inventé est qu'il est particulièrement simple de convertir un nombre binaire en nombre hexadécimal et inversement. 

| **Hexa**    | 0    | 1    | 2    | 3    | 4    | 5    | 6    | 7    |
|-------------|------|------|------|------|------|------|------|------|
| **Binaire** | 0000 | 0001 | 0010 | 0011 | 0100 | 0101 | 0110 | 0111 |
| **Hexa**    | 8    | 9    | A    | B    | C    | D    | E    | F    |
| **Binaire** | 1000 | 1001 | 1010 | 1011 | 1100 | 1101 | 1110 | 1111 |

Pour convertir un nombre binaire, on regroupe par *paquets* de 4 chiffres à partir de la virgule (pour la partie entière et la partie fractionnaire).

:::{#exm-conversion-binaire-hexadecimal}
Convertissez les nombres binaires suivants en hexadécimal.

a) (111001,1101)~2~
a) $(1110001,11\overline{001})_2$
:::

:::{#exm-conversion-hexadecimal-binaire}
Convertissez les nombres hexadécimaux suivants en binaire.

a) (537,14)~16~
a) $(45B,1\overline{DE})_{16}$
:::

## Applications des nombres binaires et hexadécimaux

### Vocabulaire des nombres binaires

Les codes binaires sont incontournables en informatique, car l'information la plus élémentaire est le **bit** (*binary-digit*).

**Quartet**
: Nombre binaire composé de 4 éléments binaires.

**Octet** (*byte*)
: Nombre binaire composé de 8 éléments binaires.

**Mot**
: Nombre binaire composé de 16, 32 ou 64 éléments binaires.

**LSB** (Least Significant Bit)
: Bit le moins significatif ou bit de poids faible (élément le plus à droite).

**MSB** (Most Significant Bit)
: Bit le plus significatif ou bit de poids fort (élément le plus à gauche).

:::{.callout-tip}
Les mots de 8 ou de 16 bits écrits en binaire sont plus lisibles si on les inscrit en laissant un espace entre les groupes de quatre bits comme ceci: 0100 0001
:::

:::{.callout-tip}
On a avantage à représenter les zéros non significatifs pour montrer la taille des codes transcrits. remarquez que ces 0 à gauche ne sont d'ailleurs pas toujours *non significatifs*. En effet, les codes binaires ne représentent pas toujours des valurs numériques. Ce sont parfois simplement des codes qui ne représentent pas des quantités. Inutile donc de faire de l'arithmétique avec ces codes. Dans ce cas, cela n'a aucun sens de vouloir les convertir en décimal et ce serait une erreur d'omettre l'écriture des zéros à gauche.
:::

### Adresse IP

Une adresse IP (Internet Protocol) est un numéro d'identification qui est attribué de façon permanente ou provisoire à chaque périphérique relié à un réseau informatique qui utilise l'Internet Protocol. L'adresse IP est à la base du système d'acheminement (le routage) des paquets de données sur Internet.

Il existe des adresses IP de version 4 sur 32 bits, et de version 6 sur 128 bits. La version 4 est actuellement la plus utilisée : elle est généralement représentée en notation décimale avec quatre nombres compris entre 0 et 255, séparés par des points, ce qui donne par exemple « 181.174.87.53 ».

:::{.content-visible when-format="html"}
![Adresse Ipv4](https://upload.wikimedia.org/wikipedia/commons/3/34/Adresse_Ipv4.svg)

![Adresse Ipv6](https://upload.wikimedia.org/wikipedia/commons/4/4d/Ipv6_address-fr.svg)
:::

### Adresse MAC

Une adresse MAC (de l'anglais Media Access Control), parfois nommée adresse physique, est un identifiant physique stocké dans une carte réseau ou une interface réseau similaire. À moins qu'elle n'ait été modifiée par l'utilisateur, elle est unique au monde. Le MAC (acronyme de Media Access Control) n'a aucun rapport avec le Mac d'Apple (diminutif de Macintosh). Toutes les cartes réseau ont une adresse MAC, même celles contenues dans les PC et autres appareils connectés (tablette tactile, smartphone, consoles de jeux, réfrigérateurs, montres ...).

On peut utiliser `Python` et le module `uuid` pour trouver l'adresse MAC de l'appareil que j'utilise pour écrire ces lignes.
```{python}
#| label: mac-adress

import uuid
print(hex(uuid.getnode()))
```

### Couleurs

Rouge, vert, bleu, de l'acronyme RVB ou en anglais RGB « red, green, blue ») désigne un système de traitement optique, d'affichage électronique ou d'un codage de signal vidéo analogique, ou un codage informatique des couleurs.

Ce principe est exploité par un téléviseur, un écran vidéo ou d'ordinateur, lequel reproduit la couleur par synthèse additive, à partir de trois couleurs primaires : rouge, vert et bleu.

Pour l'univers infographique, la valeur de chacune des couleurs primaires s'exprime dans un intervalle entre 0 et le maximum, qui est soit 1 ou 100 %, soit 255.

L'informatique utilise des nombres codés en système binaire, par groupes de huit (octet). En attribuant un octet à chacun des canaux de couleur primaire, on obtient un nombre de couleurs tel que deux codes consécutifs, pour une ou plusieurs composantes, ne peuvent pas se distinguer sur un écran correctement réglé.

| **Valeur** | **Couleur**                 | **Valeur** | **Couleur**        | **Valeur** | **Couleur**         | **Valeur** | **Couleur**     |
|------------|-----------------------------|------------|--------------------|------------|---------------------|------------|-----------------|
| #00FFFF    | aqua / cyan                 | #008000    | green (vert)       | #000080    | navy (bleu marine)  | #C0C0C0    | silver (argent) |
| #000000    | black (noir)                | #808080    | gray (gris)        | #808000    | olive (jaune olive) | #008080    | teal (sarcelle) |
| #0000FF    | blue (bleu)                 | #00FF00    | lime (vert citron) | #800080    | purple (violet)     | #FFFFFF    | white (blanc)   |
| #FF00FF    | fuchsia / magenta (fuchsia) | #800000    | maroon (bordeaux)  | #FF0000    | red (rouge)         | #FFFF00    | yellow (jaune)  |

|       **Couleur**       | **Valeur Rouge** | **Valeur Vert** | **Valeur Bleu** | **Hexadécimal** |
|:-----------------------:|:----------------:|:---------------:|:---------------:|:---------------:|
|       Red (rouge)       |     255 (FF)     |      0 (00)     |      0 (00)     |     #FF0000     |
|       Green (vert)      |      0 (00)      |     255 (FF)    |      0 (00)     |     #00FF00     |
|       Blue (bleu)       |      0 (00)      |      0 (00)     |     255 (FF)    |     #0000FF     |
|      Yellow (jaune)     |     255 (FF)     |     255 (FF)    |      0 (00)     |     #FFFF00     |
|          Orange         |     255 (FF)     |     165 (A5)    |      0 (00)     |     #FFA500     |
|           Aqua          |      0 (00)      |     255 (FF)    |     255 (FF)    |     #00FFFF     |
| Navy blue (bleu marine) |      0 (00)      |      0 (00)     |     128 (80)    |     #000080     |
|       Black (noir)      |      0 (00)      |      0 (00)     |      0 (00)     |     #000000     |
|      White (blanc)      |     255 (FF)     |     255 (FF)    |     255 (FF)    |     #FFFFFF     |

## Addition en binaire

La méthode pour l'addition en base 10 peut s'appliquer pour n'importe quelle base (principe de report). Pour additionner en binaire, on procède comme en décimal. Quand le résultat de la somme d'une colonne est supérieur à 1 (utilise plus de 1 **bit**), on reporte ce bit au voisin de gauche.

En binaire:

| + | 0 |  1 |
|:-:|:-:|:--:|
| 0 | 0 |  1 |
| 1 | 1 | 10 |

### Procédure pour l'addition {.unnumbered}

1. Superposer les nombres en colonnes de telle sorte que les chiffres de même position soit alignés verticalement.
1. Additionner colonne par colonne, à partir de la droite, en effectuant les reports appropriés.

:::{#exm-addition-binaire}
Effectuez les additions demandées:

a) (1011)~2~+(1001)~2~
a) (1011,011)~2~+(110,01)~2~
a) (110111,011)~2~+(10101,0101)~2~
:::

## Représentation des entiers

Il existe de nombreuses manières de représenter un nombre entier dans la mémoir d'un ordinateur. Nous n'en verrons que quelques unes.

### Entiers non signés

:::{#def-entiers-non-signes}
## Entiers non signés (nombres positifs)

Un nombre **entier non signé** (positif) est représenté par un nombre de bits préalablement fixé. Au besoin, on complète le nombre par des zéros à gauche fin d'avoir le nombre total de bits choisi.
:::

:::{#exm-entiers-non-signes}
Transformez les entiers décimaux suivants en entiers non signés sur un octet (huit bits).

a) 143
a) 15
a) 30
:::

:::{#exm-plus-grand-entier-non-signe}
Quel est le plus grand entier non signé pouvant être représenté avec:

a) 8 bits?
a) 32 bits?
a) $n$ bits?
:::

### Entiers signés

Pour travailler avec des entiers qui peuvent être positifs ou négatifs, il faut inclure le signe du nombre dans sa représentation, et l'on parle alors d'entiers signés.

:::{#def-entiers-signes}
## Entiers signés (représentation signe et module)

Un nombre **entier signé** (généralement représenté dans un octet) est un nombre où le 1^er^ bit (à gauche) est réservé au signe, et les autres bits permettent d'indiquer la valeur absolue du nombre. Pour indique qu'un nombre est positif (+), le 1^er^ bit est `0`, et pour un nombre négatif (-), le 1^er^ bit est `1`.
:::

:::{#exm-completion-tableau-signe-module-4-bits}
Complétez les tableaux suivants qui indiquent la représentation signe et module sur 4 bits.

:::{.columns}

:::{.column width="40%"}
| **Base 2** | **Base 10** |
|:----------:|:-----------:|
|    0000    |             |
|    0001    |             |
|    0010    |             |
|    0011    |             |
|    0100    |             |
|    0101    |             |
|    0110    |             |
|    0111    |             |
:::

:::{.column width="10%"}

:::

:::{.column width="40%"}
| **Base 2** | **Base 10** |
|:----------:|:-----------:|
|    1000    |             |
|    1001    |             |
|    1010    |             |
|    1011    |             |
|    1100    |             |
|    1101    |             |
|    1110    |             |
|    1111    |             |
:::
:::
:::

En utilisant les nombres entiers signés:

- On peut écrire autant de nombres positifs que de négatifs.
- Pour un nombre exprimé avec $n$ bits, les valeurs extrèmes sont $\pm(2^{n-1}-1)$

:::{#exm-valeurs-extremes-4-bits}
Quelles sont les valeurs extrèmes pour des entiers signés représentés sur 4 bits?
:::

:::{.callout-warning}
## Inconvénients de la représentation signe et module

- Il y a deux zéros! Un *zéro* positif (0000 0000) et un *zéro* négatif (1000 0000).
- Les opérations arithmétiques ne se font pas de la même manière qu'habituellement. Par exemple, sur 4 bits:
    - **Base 2**: 0100 + 1011 = 1111
    - **Base 10**: +4 + -3 = -7! (**FAUX!**)
:::

:::{#exm-representation-signe-module-8-bits}
Écrivez la représentation signe et module sur 8 bits de:

a) 15
```{r}
#| engine: tikz
#| echo: false

\begin{tikzpicture}
\draw (0,0) grid (8,1);
\end{tikzpicture}
```
a) -15
```{r}
#| engine: tikz
#| echo: false

\begin{tikzpicture}
\draw (0,0) grid (8,1);
\end{tikzpicture}
```
a) -10
```{r}
#| engine: tikz
#| echo: false

\begin{tikzpicture}
\draw (0,0) grid (8,1);
\end{tikzpicture}
```
a) Quel est l'intervalle de nombres entiers *signés* pouvant être représentés avec:
    i. 8 bits?
    i. 16 bits?
:::

### Complément à 1

Le complément à un d'un nombre binaire est la valeur obtenue en inversant tous les bits de ce nombre (en permutant les 0 par des 1 et inversement). Le complément à un d'un nombre se comporte alors comme le négatif du nombre original dans certaines opérations arithmétiques.

D'un point de vue algébrique, qui est plus général, c'est l'opération qui consiste à complémenter un nombre écrit en base $b$ sur $n$ chiffres à $b^n-1$. C'est-à-dire que le complément d'un nombre $a$ s'obtient par $(b^n−1)−a$.

:::{#exm-complement-a-un}
Le complément à 1 de 0100 = 
:::

:::{.callout-note}
Remarquons que dans l'@exm-complement-a-un, le complément à un représente le calcul de $(2^4-1)-0100=1111-0100=1011$
:::

:::{#exm-complement-a-un-4-bits}
Représentez dans le tableau suivant toutes les valeurs possibles du complément à un sur 4 bits.

| **Décimal** |      **+**      |      **-**      |
|:-----------:|:---------------:|:---------------:|
|      0      | $\phantom{000}$ | $\phantom{000}$ |
|      1      |                 |                 |
|      2      |                 |                 |
|      3      |                 |                 |
|      4      |                 |                 |
|      5      |                 |                 |
|      6      |                 |                 |
|      7      |                 |                 |
:::

### Complément à 2

Dans le système de complément à un, la valeur 0 a deux représentations : « +0 » et « -0 » (exemple sur 4 bits: 0000 et 1111), ce qui oblige à réaliser deux tests pour tester la valeur nulle d'un résultat. Afin de pallier ce défaut, on a introduit la représentation par complément à deux.

On obtient le complément à deux en ajoutant 1 au complément à un. On ignore alors la retenue sur le bit de poids fort.

Le complément à deux ne s'applique qu'à des nombres ayant tous la même longueur : avec un codage sur $n$ bits, cette méthode permet de représenter toutes les valeurs entières de $−2^n − 1$ à $2^{n − 1} − 1$.

Tous les entiers en `Python` sont représentés en complémentation à deux et avec un nombre *infini* de bits (la limite est la capacité de mémoire de votre système). Par exemple:

```{python}
#| label: taille-entiers-python

from sys import getsizeof

counter1 = 0
counter2 = 100
counter3 = 2**64
size1 = getsizeof(counter1)
size2 = getsizeof(counter2)
size3 = getsizeof(counter3)
print(size1, size2, size3)
```

#### Remarques {.unnumbered}

Dans la représentation en complément à deux:

- le bit de gauche est réservé au signe;
- les **entiers négatifs** sont représentés par leur complément à deux;
- les entiers positifs sont simplement représentés par leur nombre binaire signé;
- le nombre de bits est **fixé**.

:::{.callout-important}
Il n'est pas nécessaire de complémenter un nombre positif.
:::

La complémentation à deux se fait en trois étapes:

1. Écrivez le nombre binaire sur le nombre de bits préalablement établi en ne tenant pas compte du signe (ajoutez des 0 à gauche au besoin).
1. Calculez le complément à un (**Remplacez tous les `0` par des `1` et tous les `1` par des `0`**).
1. Calculez le complément à deux (**Ajoutez 1 au complément à un**).

:::{#exm-nombre-moins-4-complement-deux}
Écrivez le nombre $M=-4$ dans sa représentation en complément à deux.
:::

:::{#exm-complement-deux-octets}
Trouvez les compléments à deux des octets suivants.

a) (0110 0100)
a) (0110 1101)
a) (0110 1001)
:::

:::{#exm-valeur-5-8-bits}
Vous avez 8 bits.

a) Écrivez 5 en binaire sur 8 bits.
a) Complémentez à deux la réponses précédente.
a) Additionnez les réponses obtenues en a) et en b).
:::

### Addition de nombres par complémentation à deux

Puisque les opérations internes de l'ordinateur ne permettent que l'addition, il faut troiver une manière d'effectuer une soustraction sans réellement en faire une. Par exemple, afin de calculer 10-4, il est possible de faire l'addition 10+(-4).

Ainsi, le complément à deux est nécessaire pour représenter les nombres négatifs et pour effectuer des soustractions.

:::{.callout-important}
Il est important de notes que:

- Il faut utiliser des nombres signés;
- Pour deux nombres ayant le même nombre de bits, il se peut que le résultat de l'addition de ces nombres comporte un bit de plus. Dans ce cas, il faut ignorer le bit supplémentaire;
- **Si le signe de la réponses n'a pas de sens, cela signifie que le résultat de l'addition est un nombre trop grand pour la capacité de l'ordinateur, on parle alors de débordement.**
- Si le bit-signe est à `1`, on doit complémenter le nombre pour retrouver le nombre négatif qui représente la réponse.
:::

#### Addition de deux nombres de mêmes signes {.unnumbered}

**Cas particuliers**:

- Si, après l'addition, le bit-signe est le même que les deux chiffres, le résultat est correct.
- Si le bit-signe est *différent* de celui des deux chiffres additionnés, il y a **débordement**.

:::{#exm-addition-complement-deux-1}
À l'aide de la complémentation à deux, calculez 49+25.
```{r}
#| engine: tikz
#| echo: false

\begin{tikzpicture}
\draw (0,0) grid (8,1);
\begin{scope}[yshift=-1.2cm]
\draw (0,0) grid (8,1);
\end{scope}
\begin{scope}[yshift=-1.35cm]
\draw[very thick] (-0.2,0)--(8.2,0);
\end{scope}
\begin{scope}[yshift=-2.5cm]
\draw (0,0) grid (8,1);
\end{scope}
\end{tikzpicture}
```
:::

:::{#exm-addition-complement-deux-2}
À l'aide de la complémentation à deux, calculez 75+87.
```{r}
#| engine: tikz
#| echo: false

\begin{tikzpicture}
\draw (0,0) grid (8,1);
\begin{scope}[yshift=-1.2cm]
\draw (0,0) grid (8,1);
\end{scope}
\begin{scope}[yshift=-1.35cm]
\draw[very thick] (-0.2,0)--(8.2,0);
\end{scope}
\begin{scope}[yshift=-2.5cm]
\draw (0,0) grid (8,1);
\end{scope}
\end{tikzpicture}
```
:::

:::{#exm-addition-complement-deux-3}
À l'aide de la complémentation à deux, calculez -64-56.
```{r}
#| engine: tikz
#| echo: false

\begin{tikzpicture}
\draw (0,0) grid (8,1);
\begin{scope}[yshift=-1.2cm]
\draw (0,0) grid (8,1);
\end{scope}
\begin{scope}[yshift=-1.35cm]
\draw[very thick] (-0.2,0)--(8.2,0);
\end{scope}
\begin{scope}[yshift=-2.5cm]
\draw (0,0) grid (8,1);
\end{scope}
\end{tikzpicture}
```
:::

:::{#exm-addition-complement-deux-4}
À l'aide de la complémentation à deux, calculez -78-85.
```{r}
#| engine: tikz
#| echo: false

\begin{tikzpicture}
\draw (0,0) grid (8,1);
\begin{scope}[yshift=-1.2cm]
\draw (0,0) grid (8,1);
\end{scope}
\begin{scope}[yshift=-1.35cm]
\draw[very thick] (-0.2,0)--(8.2,0);
\end{scope}
\begin{scope}[yshift=-2.5cm]
\draw (0,0) grid (8,1);
\end{scope}
\end{tikzpicture}
```
:::

#### Addition de deux nombres de signes différents {.unnumbered}

- Il n'y a aucun débordement possible (**POURQUOI?**)
- Le résultat peut être positif ou négatif selon la valeur du bit-signe.
- On complémente le résultat si le bit-signe est `1`.

:::{#exm-addition-complement-deux-5}
À l'aide de la complémentation à deux, calculez -59-18.
```{r}
#| engine: tikz
#| echo: false

\begin{tikzpicture}
\draw (0,0) grid (8,1);
\begin{scope}[yshift=-1.2cm]
\draw (0,0) grid (8,1);
\end{scope}
\begin{scope}[yshift=-1.35cm]
\draw[very thick] (-0.2,0)--(8.2,0);
\end{scope}
\begin{scope}[yshift=-2.5cm]
\draw (0,0) grid (8,1);
\end{scope}
\end{tikzpicture}
```
:::

:::{#exm-addition-complement-deux-6}
À l'aide de la complémentation à deux, calculez 18-59.
```{r}
#| engine: tikz
#| echo: false

\begin{tikzpicture}
\draw (0,0) grid (8,1);
\begin{scope}[yshift=-1.2cm]
\draw (0,0) grid (8,1);
\end{scope}
\begin{scope}[yshift=-1.35cm]
\draw[very thick] (-0.2,0)--(8.2,0);
\end{scope}
\begin{scope}[yshift=-2.5cm]
\draw (0,0) grid (8,1);
\end{scope}
\end{tikzpicture}
```
:::

### Opérateurs bit à bit

En logique, une opération bit à bit est un calcul manipulant les données directement au niveau des bits, selon une arithmétique booléenne. Elles sont utiles dès qu'il s'agit de manipuler les données à bas niveau : codages, couches basses du réseau (par exemple TCP/IP), cryptographie, etc.

Les opérations bit à bit courantes comprennent des opérations logiques bit par bit et des opérations de décalage des bits, vers la droite ou vers la gauche.

### LEFT-SHIFT <<

### RIGHT-SHIFT >>

### COMPLÉMENT À UN ~ (MÊME CHOSE QUE NOT)

## Représentation des nombres en virgule flottante

### La norme IEEE754

En informatique, l’IEEE 754 est une norme sur l'arithmétique à virgule flottante mise au point par le *Institute of Electrical and Electronics Engineers*. Elle est la norme la plus employée actuellement pour le calcul des nombres à virgule flottante avec les CPU et les FPU. La norme définit les formats de représentation des nombres à virgule flottante (signe, mantisse, exposant, nombres dénormalisés) et valeurs spéciales (infinis et NaN), en même temps qu’un ensemble d’opérations sur les nombres flottants. Il décrit aussi cinq modes d'arrondi et cinq exceptions (comprenant les conditions dans lesquelles une exception se produit, et ce qui se passe dans ce cas).

#### Format général {.unnumbered}

Un nombre flottant est formé de trois éléments : la mantisse, l'exposant et le signe. Le bit de poids fort est le bit de signe : si ce bit est à 1, le nombre est négatif, et s’il est à 0, le nombre est positif. Les $e$ bits suivants représentent l'exposant biaisé (sauf valeur spéciale), et les $m$ bits suivants ($m$ bits de poids faible) représentent la mantisse.

:::{.content-visible when-format="html"}
![Format général d'un nombre en virgule flottante.](https://upload.wikimedia.org/wikipedia/commons/2/29/IEEE754_Format_General.png)
:::

L'exposant peut être positif ou négatif. Cependant, la représentation habituelle des nombres signés (complément à 2) rendrait la comparaison entre les nombres flottants un peu plus difficile. Pour régler ce problème, l'exposant est « biaisé », afin de le stocker sous forme d'un nombre non signé.

Ce biais est de 2e−1 − 1 (e représente le nombre de bits de l'exposant) ; il s'agit donc d'une valeur constante une fois que le nombre de bits e est fixé.

[Float Toy](https://evanw.github.io/float-toy/)