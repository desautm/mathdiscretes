# Représentation des nombres dans l'ordinateur

Lorsque nous voulons représenter des nombres dans un ordinateur, il faut distinguer deux cas biens différents; la représentation des nombres **entiers** et la représentation des nombres **fractionnaires**.

## Représentation des entiers

En `Python`, contrairement à la plupart des langages informatiques, les entiers sont représentés avec une précision **infinie**. C'est-à-dire que la seule limite correspond à la mémoire interne de la machine que vous utilisez. Cependant, dans la majorité des langages informatiques, la précision de la représentation des entiers est **finie**, c'est-à-dire qu'un certain nombre de bits est alloué en mémoire pous stocker votre nombre et vous ne pouvez pas le dépasser.

Nous pouvons connaître le nombre de bits utilisés par `Python` dans la représentation d'un entier en utilisant la fonction `getsizeof` du module `sys`.

```{python}
from sys import getsizeof

n1 = 2**32
n2 = 2**128
print(getsizeof(n1), getsizeof(n2))
```

Pour étudier le comportement d'entiers ayant une taille fixe, on peut utiliser le module `numpy`. Ce module possède plusieurs classes d'entiers à taille fixe.

### Entiers non signés

:::{#def-entiers-non-signes}
## Entiers non signés (nombres positifs)

Un nombre **entier non signé** (positif) est représenté par un nombre de bits préalablement fixé. Au besoin, on complète le nombre par des zéros à gauche fin d'avoir le nombre total de bits choisi.
:::

:::{.callout-tip}
## Les entiers non signés à taille fixe en `Python`

- `numpy.ubyte`: entier non signé sur 8 bits
- `numpy.ushort`: entier non signé sur 16 bits
- `numpy.uintc`: entier non signé sur 32 bits
- `numpy.uint`: entier non signé sur 64 bits

:::

:::{#exm-entiers-non-signes}
Transformez les entiers décimaux suivants en entiers non signés sur un octet (huit bits).

a) 143
a) 15
a) 30
:::

```{python}
import numpy as np

print(bin(np.ubyte(143)), bin(np.ubyte(15)), bin(np.ubyte(30)))
```

:::{.callout-caution}
## Soyez prudents!

Si on tente d'écrire un nombre entier qui dépasse la capacité du format, nous n'obtenons pas nécessairement un message d'erreur, il faut donc être très prudents. Par exemple, le format `numpy.byte` peut représenter les entiers de 0 à 255. Si nous tentons de représenter 256, nous obtenons:

```{python}
import numpy as np

print(np.uint8(256))
```
:::

Ce genre d'erreur est appelée un dépassement d'entier. Un dépassement d'entier (*integer overflow*) est, en informatique, une condition qui se produit lorsqu'une opération mathématique produit une valeur numérique supérieure à celle représentable dans l'espace de stockage disponible. Par exemple, l'ajout d'une unité au plus grand nombre pouvant être représenté entraîne un dépassement d'entier.

Le dépassement d'entier le plus célèbre de ces dernières années est très probablement celui qui causa la destruction de la fusée [Ariane 5](https://www.wikiwand.com/fr/Ariane_5), lors de son [vol inaugural](https://www.wikiwand.com/fr/Vol_501_d'Ariane_5), le 4 juin 1996.

:::{#exm-plus-grand-entier-non-signe}
Quel est le plus grand entier non signé pouvant être représenté avec:

a) 8 bits?
a) 32 bits?
a) $n$ bits?
:::

### Entiers signés

Pour travailler avec des entiers qui peuvent être positifs ou négatifs, il faut inclure le signe du nombre dans sa représentation, et l'on parle alors d'entiers signés.

:::{#def-entiers-signes}
## Entiers signés (représentation signe et module)

Un nombre **entier signé** (généralement représenté dans un octet) est un nombre où le 1^er^ bit (à gauche) est réservé au signe, et les autres bits permettent d'indiquer la valeur absolue du nombre. Pour indiquer qu'un nombre est positif (+), le 1^er^ bit est `0`, et pour un nombre négatif (-), le 1^er^ bit est `1`.
:::

:::{.callout-tip}
## Les entiers signés à taille fixe en `Python`

- `numpy.byte`: entier signé sur 8 bits
- `numpy.short`: entier signé sur 16 bits
- `numpy.intc`: entier signé sur 32 bits
- `numpy.int_`: entier signé sur 64 bits

:::

:::{#exm-completion-tableau-signe-module-4-bits}
Complétez les tableaux suivants qui indiquent la représentation signe et module sur 4 bits.

:::{.columns}

:::{.column width="40%"}
| **Base 2** | **Base 10** |
|:----------:|:-----------:|
|    0000    |             |
|    0001    |             |
|    0010    |             |
|    0011    |             |
|    0100    |             |
|    0101    |             |
|    0110    |             |
|    0111    |             |
:::

:::{.column width="10%"}

:::

:::{.column width="40%"}
| **Base 2** | **Base 10** |
|:----------:|:-----------:|
|    1000    |             |
|    1001    |             |
|    1010    |             |
|    1011    |             |
|    1100    |             |
|    1101    |             |
|    1110    |             |
|    1111    |             |
:::
:::
:::

En utilisant les nombres entiers signés:

- On peut écrire autant de nombres positifs que de négatifs.
- Pour un nombre exprimé avec $n$ bits, les valeurs extrèmes sont $\pm(2^{n-1}-1)$

:::{#exm-valeurs-extremes-4-bits}
Quelles sont les valeurs extrèmes pour des entiers signés représentés sur 4 bits?
:::

:::{.callout-warning}
## Inconvénients de la représentation signe et module

- Il y a deux zéros! Un *zéro* positif (0000 0000) et un *zéro* négatif (1000 0000).
- Les opérations arithmétiques ne se font pas de la même manière qu'habituellement. Par exemple, sur 4 bits:
    - **Base 2**: 0100 + 1011 = 1111
    - **Base 10**: +4 + -3 = -7! (**FAUX!**)
:::

:::{#exm-representation-signe-module-8-bits}
Écrivez la représentation signe et module sur 8 bits de:

a) 15
```{r}
#| engine: tikz
#| echo: false

\begin{tikzpicture}
\draw (0,0) grid (8,1);
\end{tikzpicture}
```
a) -15
```{r}
#| engine: tikz
#| echo: false

\begin{tikzpicture}
\draw (0,0) grid (8,1);
\end{tikzpicture}
```
a) -10
```{r}
#| engine: tikz
#| echo: false

\begin{tikzpicture}
\draw (0,0) grid (8,1);
\end{tikzpicture}
```
a) Quel est l'intervalle de nombres entiers *signés* pouvant être représentés avec:
    i. 8 bits?
    i. 16 bits?
:::

## Format d'un nombre en virgule flottante

La virgule flottante est une méthode d'écriture de nombres fréquemment utilisée dans les ordinateurs, équivalente à la notation scientifique en numération binaire. 

Par exemple:
$$
+13,254 = \underbrace{+}_{\text{signe}} \underbrace{0,13254}_{\text{mantisse}} \times 10^{\overbrace{{2}}^{\text{exposant}}}
$$

### Format général {.unnumbered}

Un nombre flottant est formé de trois éléments : la mantisse, l'exposant et le signe. Le bit de poids fort est le bit de signe : si ce bit est à 1, le nombre est négatif, et s’il est à 0, le nombre est positif. Les $e$ bits suivants représentent l'exposant biaisé (sauf valeur spéciale), et les $m$ bits suivants ($m$ bits de poids faible) représentent la mantisse.

:::{.columns}

:::{.column width="40%"}
| **Signe** | **Exposant biaisé** | **Mantisse** |
|:---------:|:-------------------:|:------------:|
|  (1 bit)  |       (e bits)      |   (m bits)   |
:::

:::{.column width="10%"}

:::

:::{.column width="40%"}
![Format général de représentation des flottants](https://upload.wikimedia.org/wikipedia/commons/2/29/IEEE754_Format_General.png)
:::
:::

Nous reviendrons sur l'exposant biaisé à la section @sec-ieee754.

### Opérations sur les nombres en virgule flottante

Pour simplifier la présentation et la compréhension, nous utiliserons la base décimale avec 7 chiffres de précision, tout comme le format *binary32* (format à simple précision), que nous verrons plus tard. Les principes fondamentaux sont les mêmes peu importe la base et le nombre de chiffres de précision. Nous utiliserons $f$ pour désigner la mantisse (en anglais on parle de **float**) et $e$ pour désigner l'exposant.

#### Additions et soustractions

Pour additionner (ou soustraire) des nombres en virgule flottante, nous devons les représenter avec le même exposant. La convention est de modifier l'exposant le *plus petit* pour le rendre égal à l'exposant le plus grand.

$$
\begin{array}{rrll}
& e=5; & s=1,234567 & (123456,7) \\
+ & e=2; & s=1,017654 & (101,7654) \\ \\
\hline
\\
& e=5; & s=1,234567 &  \\
+ & e=5; & s=0,01017654 & (\text{après déplacement de la virgule}) \\ \\
\hline
\\
& e=5; & s=1,235584654 & (\text{somme réelle}: 123558,4654)
\end{array}
$$

Le résultat précédent correspond à la somme réelle des deux nombres. Le résultat sera ensuite arrondi à 7 chiffres et normalisé si nécessaire. Le résultat final est:

$$
\begin{array}{rrll}
& e=5; & s=1,235585 & (\text{somme finale}: 123558,5)
\end{array}
$$

Les trois derniers chiffres du second nombre (654) sont essentiellement perdus. C'est ce que nous appelons l'erreur d'arrondi. Dans des cas extrèmes, la somme de deux nombres *différents de zéro* peut être égale à un de ces nombre.

:::{#exm-addition-deux-nombres}
Additionnez les deux nombres 123456,7 et 0,009876543, en utilisant 7 chiffres pour la mantisse.
:::

::: {.callout-warning}
## Attention

Dans l'exemple précédent, il semblerait qu'un grand nombre de chiffres supplémentaires soit nécessaire pour s'assurer d'obtenir le bon résultat. En pratique, pour l'addition ou la soustraction en binaire, en utilisant une bonne implémentation, seulement un *guard bit*, un *rounding bit* et un *sticky bit* sont nécessaires pour obtenir un bon résultat.
:::

Un autre problème peut se produire lorsque des approximations de deux nombres presque égaux sont soustraites. 

::: {#exm-soustraction-deux-nombres-presque-egaux}
Effectuez la soustraction de 123457,1467 et 123456,659, en utilisant 7 chiffres pour la mantisse.
:::

::: {#exm-soustraction-deux-nombres-presque-egaux-erreur}
Calculez l'erreur relative faite à l'@exm-soustraction-deux-nombres-presque-egaux.
:::

::: {.callout-warning}
## Attention

L'[annulation catastrophique](https://www.wikiwand.com/en/Catastrophic_cancellation) de l'@exm-soustraction-deux-nombres-presque-egaux illustre le danger de supposer que tous les chiffres d'un résultat sont pertinents.
:::

::: {#exm-difference-de-carres}
Soit deux nombres $x$ et $y$. La manière naïve de calculer la fonction $x^2-y^2$ en virgule flottante est sujette à l'annulation catastrophique, lorsque $x$ et $y$ sont proches. En effet, la soustraction peut faire apparaître les erreurs d'arrondi dans l'élévation au carré. La fonction factorisée $(x+y)(x-y)$ évite l'annulation catastrophique car elle évite d'introduire des erreurs d'arrondis avant la soustraction.

```{python}
x = 1+2**(-29)
y = 1+2**(-30)

ds1 = x**2-y**2
ds2 = (x+y)*(x-y)
err = abs(ds1-ds2)/ds2

print(ds1, ds2, err)
```

:::


#### Multiplications et divisions

Contrairement à l'addition et la soustraction, il n'y a pas de problème d'annulation catastrophique pour la multiplication ou la division. 

Pour multiplier, les mantisses sont multipliées et les exposants sont additionnés. Le résultat est ensuite arrondi et normalisé. Pour diviser, les mantisses sont divisées et les exposants sont soustraits. Le résultat est ensuite arrondi et normalisé.

::: {#exm-multiplication-virgule-flottante}
Effectuez la multiplication de 4734,612 et 541724,2, en utilisant 7 chiffres pour la mantisse.
:::

## La norme IEEE754 {#sec-ieee754}

En informatique, l’IEEE 754 est une norme sur l'arithmétique à virgule flottante mise au point par le *Institute of Electrical and Electronics Engineers*. Elle est la norme la plus employée actuellement pour le calcul des nombres à virgule flottante avec les CPU et les FPU. La norme définit les formats de représentation des nombres à virgule flottante (signe, mantisse, exposant, nombres dénormalisés) et valeurs spéciales (infinis et NaN), en même temps qu’un ensemble d’opérations sur les nombres flottants. Il décrit aussi cinq modes d'arrondi et cinq exceptions (comprenant les conditions dans lesquelles une exception se produit, et ce qui se passe dans ce cas).

![Format général d'un nombre en virgule flottante.](https://upload.wikimedia.org/wikipedia/commons/2/29/IEEE754_Format_General.png)

### Biais de l'exposant {.unnumbered}

L'exposant peut être positif ou négatif. Cependant, la représentation habituelle des nombres signés (complément à 2) rendrait la comparaison entre les nombres flottants un peu plus difficile. Pour régler ce problème, l'exposant est **biaisé**, afin de le stocker sous forme d'un nombre non signé. Le terme **biaisé** signifie que l'exposant est stocké sous forme d'entier positif, mais pour trouver l'exposant réel, il faut soustraire une valeur (le biais) à celle stockée. 

Ce biais est de $2^{e-1}-1$ ($e$ représente le nombre de bits de l'exposant) ; il s'agit donc d'une valeur constante une fois que le nombre de bits $e$ est fixé.

Par exemple, dans le cas où l'exposant est composé de 8 bits, nous avons $e=8$ et le biais est de $2^{8-1}-1=127$.

L'interprétation d'un nombre (autre qu'infini) est donc : *valeur* = *signe* x 2^(*exposant*−*biais*)^ x *mantisse* avec:

- *signe* = $\pm$ 1
- *biais* = $2^{e-1}-1$

### Exceptions{.unnumbered}

Le bit de poids fort de la mantisse est déterminé par la valeur de l'exposant biaisé. Si l'exposant biaisé est différent de 0 et de $2^e-1$, le bit de poids fort de la mantisse est 1, et le nombre est dit **normalisé**. Si l'exposant biaisé est nul, le bit de poids fort de la mantisse est nul, et le nombre est **dénormalisé**.

Il y a trois cas particuliers:

- si l'exposant biaisé et la mantisse sont tous deux nuls, le nombre est $\pm$ 0 (selon le bit de signe)
- si l'exposant biaisé est égal à $2^e-1$, et si la mantisse est nulle, le nombre est $\pm$ infini (selon le bit de signe)
- si l'exposant biaisé est égal à $2^e-1$, mais que la mantisse n'est pas nulle, le nombre est *NaN* (not a number : pas un nombre).

Un nombre flottant normalisé a une valeur $v$ donnée par la formule suivante:
$$
v = s \times 2^e \times (1+f)
$$

- $s=\pm 1$ représente le signe (selon le bit de signe);
- $e$ est l'exposant avant son biais de $2^{e-1}-1$;
- $f$ représente un nombre en binaire compris entre 0 et 1.

Les nombres dénormalisés suivent le même principe, sauf qu'une seule valeur de $e$ est possible, $e=2-2^{e-1}$. Nous avons donc 
$$
v = s \times 2^e \times (0+f)
$$

::: {.callout-note}
- Il y a deux zéros: +0 et -0 (zéro positif et zéro négatif), selon la valeur du bit de signe;
- Il y a deux infinis: $+\infty$ et $-\infty$, selon la valeur du bit de signe;
- Les zéros et les nombres dénormalisés ont un exposant biaisé de 0; tous les bits du champ *exposant* sont donc à 0;
- Les NaNs et les infinis ont un exposant biaisé de $2^e-1$; tous les bits du champ *exposant* sont donc à 1;
- Les NaNs peuvent avoir un signe et une partie significative mais ceux-ci n'ont aucun sens en tant que valeur réelle (sauf pour la signalisation, qui peut activer une exception, et la correction d'erreurs) ;
:::

La mantisse est représentée par:
$$
\begin{aligned}
f &= \sum_{i=1}^{m} b_i 2^{-i}, \qquad b_i \in \{0, 1 \} \\
&= b_1 2^{-1}+b_2 2^{-2}+\ldots + b_m 2^{-m}
\end{aligned}
$${#eq-mantisse-1-2}
pour un entier fixé $m$, la taille de la mantisse. L'équation (@eq-mantisse-1-2) représente des nombres dans l'intervalle $[1,2[$. De manière équivalente, nous pouvons écrire
$$
\begin{aligned}
f &= 2^{-m} \sum_{i=1}^{m} b_i 2^{m-i} = 2^{-m} z, \qquad b_i \in \{0, 1 \}
\end{aligned}
$${#eq-mantisse-0-puissance-2}
pour un entier $z$ dans l'ensemble $\{ 0, 1, \ldots, 2^m-1 \}$.

:::{#exm-virgule-flottante-1-bit}
Écrivez toutes les mantisses possibles si le nombre de bits de la mantisse est de 1, c'est-à-dire $m=1$.
:::

:::{#exm-virgule-flottante-2-bits}
Écrivez toutes les mantisses possibles si le nombre de bits de la mantisse est de 2, c'est-à-dire $m=2$.
:::

::: {.callout-note}
L'expression $f = \sum_{i=1}^{m} b_i 2^{-i}$ peut être calculée facilement lorsque tous les $b_i=1$. Nous obtenons:
$$
f = \sum_{i=1}^{m} 1 \cdot 2^{-i} = 2-2^{-m}
$$
:::

:::{#def-epsilon-machine}
## L'epsilon d'une machine

L'epsilon d'une machine est défini comme le plus petit nombre qui, ajouté à un, donne un résultat différent de un.

En utilisant l'équation (@eq-mantisse-0-puissance-2), nous remarquons que le plus petit nombre (autre que 0) possible est $2^{-m}$.

Pour déterminer l'epsilon de la machine en `Python`, on utilise la commande `sys.float_info.epsilon` du module `sys`.

```{python}
import sys
sys.float_info.epsilon
```
:::

Nous pouvons aussi utiliser un petit programme pour déterminer l'epsilon de la machine.
```{python}
eps = 1.0
while eps + 1 > 1:
    eps /= 2
eps *= 2
print("L'epsilon machine est:", eps)
```

En clair, si nous additionnons un nombre plus petit que l'epsilon machine, le résultat reste inchangé.
```{python}
import sys
eps = sys.float_info.epsilon
print(1+eps, 1+eps/2)
```

### Le format à virgule flottante à précision simple

Le standard [IEEE 754](https://www.wikiwand.com/fr/IEEE%20754) spécifie un format à précision simple comme:

- un signe : 1 bit
- exposant biaisé : 8 bits
- mantisse : 23 bits + 1 bit implicite

L'exposant est un entier non signé de 8 bits de 0 à 255 sous la forme biaisée, c'est-à-dire que pour obtenir l'exposant réel, nous devons lui soustraire 127. Les exposants peuvent prendre les valeurs entières de -126 à +127 car les exposants -127 (seulement des zéros) et +128 (seulement des uns) sont réservés pour des nombres spéciaux.

```{r}
#| engine: tikz
#| echo: false

\begin{tikzpicture}

\tikzstyle{signe}=[draw, very thick, fill=blue!20!white]
\tikzstyle{exposant}=[draw, very thick, fill=green!20!white]
\tikzstyle{mantisse}=[draw, very thick, fill=red!20!white]

\matrix [column sep=0cm]
{
\node (f-31) [signe] {0}; 

& \node (f-30) [exposant] {0}; 
& \node (f-29) [exposant] {1}; 
& \node (f-28) [exposant] {1}; 
& \node (f-27) [exposant] {1}; 
& \node (f-26) [exposant] {1}; 
& \node (f-25) [exposant] {1}; 
& \node (f-24) [exposant] {0}; 
& \node (f-23) [exposant] {0}; 

& \node (f-22) [mantisse] {0}; 
& \node (f-21) [mantisse] {1}; 
& \node (f-20) [mantisse] {0}; 
& \node (f-19) [mantisse] {0}; 
& \node (f-18) [mantisse] {0}; 
& \node (f-17) [mantisse] {0}; 
& \node (f-16) [mantisse] {0}; 
& \node (f-15) [mantisse] {0};
& \node (f-14) [mantisse] {0};
& \node (f-13) [mantisse] {0};
& \node (f-12) [mantisse] {0};
& \node (f-11) [mantisse] {0};
& \node (f-10) [mantisse] {0};
& \node (f-9) [mantisse] {0};
& \node (f-8) [mantisse] {0};
& \node (f-7) [mantisse] {0};
& \node (f-6) [mantisse] {0};
& \node (f-5) [mantisse] {0};
& \node (f-4) [mantisse] {0};
& \node (f-3) [mantisse] {0};
& \node (f-2) [mantisse] {0};
& \node (f-1) [mantisse] {0};
& \node (f-0) [mantisse] {0};  
\\
};

\draw[blue] ([shift=({0,0.1cm})]f-31.north)--++(0,0.25) node[above] {signe};
\draw[fill=black] ([shift=({0,-0.1cm})]f-31.south) circle (1pt) node[below] {31};
\draw[fill=black] ([shift=({0,-0.1cm})]f-30.south) circle (1pt) node[below] {30};
\draw[fill=black] ([shift=({0,-0.1cm})]f-23.south) circle (1pt) node[below] {23};
\draw[fill=black] ([shift=({0,-0.1cm})]f-22.south) circle (1pt) node[below] {22};
\draw[fill=black] ([shift=({0,-0.1cm})]f-0.south) circle (1pt) node[below] {0};
\node[below] at (f-16.south) {(index des bits)};

\draw[green] ([shift=({0,0.1cm})]f-30.north)--++(0,0.25)--([shift=({0,0.35cm})]f-23.north) node[midway, above] {exposant (8 bits)} --++(0,-0.25);

\draw[red] ([shift=({0,0.1cm})]f-22.north)--++(0,0.25)--([shift=({0,0.35cm})]f-0.north) node[midway, above] {mantisse (23 bits)} --++(0,-0.25);

\node[right] at (f-0.east) {$=0,15625$};

\end{tikzpicture}
```

La valeur est donc donnée par:

$$
(-1)^{b_{31}}\times 2^{(b_{30}b_{29}\ldots b_{23})_2-127}\times (1,b_{22}b_{21}\ldots b_0)_2
$$
ce qui donne
$$
\text{valeur}=(-1)^{\text{signe}}\times 2^{(E-127)}\times \left( 1+ \sum_{i=1}^{23} b_{23-i} 2^{-i}\right)
$$

Dans l'exemple précédent, nous avons:

- signe = $b_{31}$ = 0;
- $(-1)^{\text{signe}}=(-1)^0=+1\in \{-1,+1\}$;
- $E=(b_{30}b_{29}\ldots b_{23})_2=\sum_{i=0}^7 b_{23+i}2^{+i}=124\in \{1,\ldots, (2^8-1)-1\}=\{1,\ldots, 254\}$;
- $2^{(E-127)}=2^{124-127}=2^{-3}\in \{2^{-126},\ldots, 2^{127}\}$;
- $1,b_{22}b_{21}\ldots b_0=1+\sum_{i=1}^{23} b_{23-i}2^{-i}=1+1\cdot 2^{-2}=1,25\in \{1,1+2^{-23},\ldots, 2-2^{-23}\} \subset [1;2-2^{-23}] \subset [1;2[$

#### L'encodage de l'exposant {.unnumbered}

L'exposant du format à virgule flottante à précision simple est encodé de manière biaisée, avec un biais de 127 ($2^{e-1}-1=2^{8-1}-1$).

- E~min~=01~16~-7F~16~=-126
- E~max~=FE~16~-7F~16~=127
- Biais de l'exposant = 7F~16~=127

Pour obtenir l'exposant véritable, on doit soustraire 127 à l'exposant stocké.

Les exposants 00~16~ et FF~16~ ont une interprétation spéciale.

| Exposant           | Fraction = 0   | Fraction $\neq$ 0  | Équation                                                                    |
|--------------------|----------------|--------------------|-----------------------------------------------------------------------------|
| 00~16~ | $\pm$ zéro     | nombre dénormalisé | $(-1)^{\text{signe}}\times 2^{-126}\times 0,\text{fraction}$                |
| 01~16~,...,FE~16~    | valeur normale | valeur normale     | $(-1)^{\text{signe}}\times 2^{\text{exposant}-127}\times 1,\text{fraction}$ |
| FF~16~ | $\pm$ infini   | NaN                |                                                                             |

#### Cas particuliers dans le format virgule flottante à précision simple {.unnumbered}

Pour les exemples suivants, trouvez la représentation sous forme binaire et hexadécimale.

:::{#exm-plus-petit-nombre-denormalise}
Trouvez le plus petit nombre dénormalisé positif.
:::

:::{#exm-plus-grand-nombre-denormalise}
Trouvez le plus grand nombre dénormalisé positif.
:::

:::{#exm-plus-petit-nombre-normalise}
Trouvez le plus petit nombre normalisé positif.
:::

:::{#exm-plus-grand-nombre-normalise}
Trouvez le plus grand nombre normalisé positif.
:::

:::{#exm-plus-grand-nombre-plus-petit-un}
Trouvez le plus grand nombre plus petit que un.
:::

### Le format à virgule flottante à précision double

[Float Toy](https://evanw.github.io/float-toy/)

[Princeton Float](https://introcs.cs.princeton.edu/java/91float/)

[Cheatsheets for ieee 754 representation](https://hackingcpp.com/cpp/lang/fundamental_types.html)

[IEEE754 Wiki Wand](https://www.wikiwand.com/fr/IEEE%20754)